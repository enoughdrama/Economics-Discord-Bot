const { SlashCommandBuilder } = require('@discordjs/builders');
const { EmbedBuilder, ActionRowBuilder, ButtonBuilder, ButtonStyle } = require('discord.js');
const userController = require('../controller/user.controller');

const MARRIAGE_COST = 1000;

module.exports = {
    data: new SlashCommandBuilder()
        .setName('marry')
        .setDescription('–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ–∂–µ–Ω–∏—Ç—å—Å—è –Ω–∞ –≤–∞—Å.')
        .addUserOption(option =>
            option.setName('partner')
                .setDescription('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –∫–æ—Ç–æ—Ä–æ–º—É –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ')
                .setRequired(true)),

    async execute(interaction) {
        const proposer = interaction.user;
        const partner = interaction.options.getUser('partner');

        if (proposer.id === partner.id) {
            await interaction.reply({ content: '–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –ø–æ–∂–µ–Ω–∏—Ç—å—Å—è —Å–∞–º–æ–º—É —Å–µ–±–µ!', ephemeral: true });
            return;
        }

        let proposerData = await userController.findOneUser('person', proposer.id);
        if (proposerData.balance < MARRIAGE_COST) {
            await interaction.reply({ content: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è!', ephemeral: true });
            return;
        }
        await userController.updateUserBalance(proposer.id, proposerData.balance - MARRIAGE_COST);

        const row = new ActionRowBuilder()
            .addComponents(
                new ButtonBuilder()
                    .setCustomId('accept_marriage')
                    .setLabel('–ü—Ä–∏–Ω—è—Ç—å')
                    .setStyle(ButtonStyle.Success),
                new ButtonBuilder()
                    .setCustomId('decline_marriage')
                    .setLabel('–û—Ç–∫–∞–∑–∞—Ç—å—Å—è')
                    .setStyle(ButtonStyle.Danger)
            );

        const message = await interaction.reply({
            content: `${partner}, ${proposer.username} –¥–µ–ª–∞–µ—Ç –≤–∞–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ–∂–µ–Ω–∏—Ç—å—Å—è –Ω–∞ –Ω–µ–º! –°—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è: ${MARRIAGE_COST} –º–æ–Ω–µ—Ç. –ü—Ä–∏–Ω–∏–º–∞–µ—Ç–µ –ª–∏ –≤—ã?`,
            components: [row],
            fetchReply: true,
        });

        const filter = (i) => ['accept_marriage', 'decline_marriage'].includes(i.customId) && i.user.id === partner.id;
        const collector = interaction.channel.createMessageComponentCollector({ filter, max: 1, time: 60000 });

        collector.on('collect', async (i) => {
            if (i.customId === 'accept_marriage') {
                await userController.updateUserParam(partner.id, 'username', partner.username, 'person')
                await userController.updateUserParam(proposer.id, 'username', proposer.username, 'person')

                await i.update({
                    content: `${partner.username} –ø—Ä–∏–Ω—è–ª(–∞) –≤–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ! –û–∂–∏–¥–∞–π—Ç–µ –º–æ–º–µ–Ω—Ç–∞...`,
                    components: [],
                });

                setTimeout(async () => {
                    const animationEmbed = new EmbedBuilder()
                        .setColor('#60b0f4')
                        .setTitle('üíç –°–≤–∞–¥–µ–±–Ω–∞—è —Ü–µ—Ä–µ–º–æ–Ω–∏—è –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è!')
                        .setImage('https://media1.tenor.com/m/X5Cfbkw3szkAAAAC/anime-marriage.gif');

                    await interaction.editReply({ embeds: [animationEmbed] });

                    setTimeout(async () => {
                        const finalEmbed = new EmbedBuilder()
                            .setColor('#60b0f4')
                            .setTitle('üíí –°–≤–∞–¥—å–±–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!')
                            .setDescription(`${proposer.username} –∏ ${partner.username} —Ç–µ–ø–µ—Ä—å –∂–µ–Ω–∞—Ç—ã! –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!`)
                            .setFooter({ text: '–ú—ã –∂–µ–ª–∞–µ–º –≤–∞–º –¥–æ–ª–≥–∏—Ö –∏ —Å—á–∞—Å—Ç–ª–∏–≤—ã—Ö –ª–µ—Ç –≤–º–µ—Å—Ç–µ!' });

                        await interaction.editReply({ embeds: [finalEmbed], components: [] });
                        await userController.createOrUpdateMarriageStatus(proposer.id, partner.id);
                    }, 5000);
                }, 500);
            } else {
                await i.update({ content: `${partner.username} –æ—Ç–∫–∞–∑–∞–ª—Å—è(–∞—Å—å) –æ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è.`, components: [] });
            }
        });

    },
};
