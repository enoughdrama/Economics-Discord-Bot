const { SlashCommandBuilder, ActionRowBuilder, SelectMenuBuilder, EmbedBuilder } = require('discord.js');
const userController = require('../controller/user.controller');

module.exports = {
    data: new SlashCommandBuilder()
        .setName('top')
        .setDescription('–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –¥–µ–Ω—å–≥–∞–º –∏–ª–∏ –≤—Ä–µ–º–µ–Ω–∏ –≤ –≥–æ–ª–æ—Å–æ–≤–æ–º —á–∞—Ç–µ'),
    
    async execute(interaction) {
        const row = new ActionRowBuilder()
            .addComponents(
                new SelectMenuBuilder()
                    .setCustomId('select_top_type')
                    .setPlaceholder('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ç–æ–ø–∞...')
                    .addOptions([
                        {
                            label: '–ü–æ –î–µ–Ω—å–≥–∞–º üí∞',
                            description: '–ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –¥–µ–Ω—å–≥–∞–º',
                            value: 'by_money',
                        },
                        {
                            label: '–ü–æ –í—Ä–µ–º–µ–Ω–∏ –≤ –í–æ–π—Å–µ üïí',
                            description: '–ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –≤ –≥–æ–ª–æ—Å–æ–≤–æ–º —á–∞—Ç–µ',
                            value: 'by_voice_time',
                        },
                    ]),
            );

        await interaction.reply({ content: '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ç–æ–ø–∞:', components: [row], ephemeral: true });

        const filter = (i) => i.customId === 'select_top_type' && i.user.id === interaction.user.id;
        
        const collector = interaction.channel.createMessageComponentCollector({ filter, time: 60000 });

        collector.on('collect', async (i) => {
            await i.deferUpdate(); // Acknowledge the interaction.

            const topUsers = i.values[0] === 'by_money' ? await userController.getTopByMoney() : await userController.getTopByVoiceTime();
            const embed = new EmbedBuilder()
                .setTitle(`–¢–æ–ø –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ${i.values[0] === 'by_money' ? '–ü–æ –î–µ–Ω—å–≥–∞–º üí∞' : '–ü–æ –í—Ä–µ–º–µ–Ω–∏ –≤ –í–æ–π—Å–µ üïí'}`)
                .setColor('#0099ff');

            const formattedUserList = await Promise.all(topUsers.map(async (user, index) => {
                const value = i.values[0] === 'by_money' ? user.balance : user.voice_time;
                try {
                    const userObject = await interaction.guild.members.fetch(user.discord_id);
                    const username = userObject ? userObject.user.username : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π';
                    return `${index + 1}. ${username}: ${value}`;
                } catch (error) {
                    console.error(`Failed to fetch user ${user.discord_id}:`, error);
                    return `${index + 1}. –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π: ${value}`;
                }
            }));

            embed.setDescription(formattedUserList.join("\n") || "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö.");

            // Update the original reply to include the embed and disable the select menu
            const disabledRow = new ActionRowBuilder()
                .addComponents(
                    new SelectMenuBuilder()
                        .setCustomId('select_top_type_disabled')
                        .setPlaceholder('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ç–æ–ø–∞...')
                        .setDisabled(true)
                        .addOptions([
                            {
                                label: '–ü–æ –î–µ–Ω—å–≥–∞–º üí∞',
                                description: '–ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –¥–µ–Ω—å–≥–∞–º',
                                value: 'by_money',
                            },
                            {
                                label: '–ü–æ –í—Ä–µ–º–µ–Ω–∏ –≤ –í–æ–π—Å–µ üïí',
                                description: '–ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –≤ –≥–æ–ª–æ—Å–æ–≤–æ–º —á–∞—Ç–µ',
                                value: 'by_voice_time',
                            },
                        ]),
                );

            await i.editReply({ content: '–í–∞—à –≤—ã–±–æ—Ä:', embeds: [embed], components: [] });
        });

        collector.on('end', collected => {
            if (collected.size === 0) {
                interaction.followUp({ content: '–í—ã–±–æ—Ä –Ω–µ –±—ã–ª —Å–¥–µ–ª–∞–Ω.', ephemeral: true });
            }
        });
    },
};
